#define _CRT_SECURE_NO_WARNINGS 1
//冒泡排序
#include<stdio.h>
//void bubble_sort(int* arr, int sz)
//{
//	int i = 0;
//	for (i = 0;i < sz - 1;i++)//趟数
//	{
//		int j = 0;
//		int tmp = 0;
//		int count = 0;
//		for (j = 0;j < sz - 1 - i;j++)//一趟所需要的对数
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				count++;
//			}
//		}
//		if (count == 0)//若一趟中未执行对数互换，则已排好序
//		{
//			break;
//		}
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,7,5,4,4,3,2,1,0 };
//	int sz = sizeof arr / sizeof arr[0];
//	bubble_sort(arr, sz);
//	int i = 0;
//	for (i = 0;i < sz;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//qsort函数的用法，整型，浮点数，结构体整型，结构体字符
#include<stdlib.h>
//
//自制qsort函数！
//
void Swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0;i < width;i++)
	{
		int tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}

void bubble_sort(void* base, int sz, int width, int(*cmp)(const void*, const void*))
{
	int i = 0;
	for (i = 0;i < sz - 1;i++)
	{
		int j = 0;
		for (j = 0;j < sz - i - 1;j++)
		{
			if (cmp((char*)base + j * width, (char*)base + j * width + width) > 0)//发明函数指针的人真是个天才！！！
			{
				Swap((char*)base + j * width, (char*)base + (j + 1)*width,width);
			}
		}
	}
}




int cmp_int(const void*e1, const void*e2)
{
	return *(int*)e1 - *(int*)e2;
}

void test1()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1 ,0 };
	int sz, i;
	sz = sizeof arr / sizeof arr[0];
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	for (i = 0;i < sz;i++)
	{
		printf("%d ", arr[i]);
	}printf("\n");
}

int cmp_float(const void* e1, const void* e2)//！！！！compare函数返回的是0或1或-1，是int类型的。
{
	return *(float*)e1 - *(float*)e2;
}

 void test2()
{
	float arr[] = { 6.0,5.0,4.0,3.0,2.0,1.0 };
	int sz, i;
	sz = sizeof arr / sizeof arr[0];
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_float);
	for (i = 0;i < sz;i++)
	{
		printf("%f ", arr[i]);
	}printf("\n");
}

 struct Stu
 {
	 char name[20];
	 int age;
 };

 int cmp_struct_by_age(const void* e1, const void* e2)
 {
	 return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
 }

 void test3()
 {
	 struct Stu s[3] = { {"张三",18},{"李四",16},{"王五",14}};
	 int sz, i;
	 sz = sizeof s / sizeof s[0];
	 bubble_sort(s, sz, sizeof(s[0]), cmp_struct_by_age);
	 for (i = 0;i < sz;i++)
	 {
		 printf("%d ", s[i].age);
	 }printf("\n");
 }
#include<string.h>
 int cmp_struct_by_name(const void* e1, const void* e2)
 {   //比较两个字符串
	 //不能直接用大于，小于比较，要用strcmp比较。用法：strcmp(字符串1，字符串2);
	 return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
 }

 void test4()
 {
	 struct Stu s[3] = { {"张三",18},{"李四",16},{"王五",14} };
	 int sz, i;
	 sz = sizeof s / sizeof s[0];
	bubble_sort(s, sz, sizeof(s[0]), cmp_struct_by_name);
	 for (i = 0;i < sz;i++)
	 {
		 printf("%s ", s[i].name);
	 }printf("\n");
 }
 

int main()
{
	test1();
	test2();
	test3();
	test4();
	return 0;
}